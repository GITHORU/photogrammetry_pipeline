name: Build Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permet le déclenchement manuel

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.11'
            spec-file: photogeoalign_windows.spec
            artifact-name: photogeoalign-windows
            executable-ext: .exe
          - os: ubuntu-22.04  # StaticX rend la version GLIBC irrelevante
            python-version: '3.11'
            spec-file: photogeoalign_linux.spec
            artifact-name: photogeoalign-linux
            executable-ext: ""
          # Optionnel: Build avec Python 3.10 pour compatibilité
          # - os: ubuntu-latest
          #   python-version: 3.10
          #   spec-file: photogeoalign_linux.spec
          #   artifact-name: photogeoalign-linux-py310
          #   executable-ext: ""

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Fix Git ownership (Linux)
      if: contains(matrix.os, 'ubuntu')
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
        git config --global --add safe.directory '*'
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        sudo apt-get update
        # Install older GLIBC development packages for compatibility
        sudo apt-get install -y build-essential patchelf
        # Install Python from source with older GLIBC linking
        sudo apt-get install -y libssl-dev libffi-dev libbz2-dev libreadline-dev libsqlite3-dev
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies (static linking approach)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        # Install PyInstaller with static linking capabilities
        pip install pyinstaller==6.3.0 staticx
    
    - name: Install Python dependencies (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install --force-reinstall pyinstaller==6.3.0
    
    - name: Create hooks directory (cross-platform)
      run: |
        python -c "import os; os.makedirs('hooks', exist_ok=True); print('Hooks directory ready')"
    
    - name: Verify spec file exists
      run: |
        python -c "import os; print(f'Spec file: ${{ matrix.spec-file }}'); print('Exists:', os.path.exists('${{ matrix.spec-file }}'))"
    
    - name: Build executable (static linking)
      if: matrix.os == 'ubuntu-22.04'
      run: |
        # Build with PyInstaller first
        echo "Building with PyInstaller..."
        pyinstaller ${{ matrix.spec-file }} --clean --noconfirm
        
        # Then wrap with StaticX for ultimate compatibility
        echo "Wrapping with StaticX for GLIBC independence..."
        cd dist
        if [ -f "photogeoalign_linux" ]; then
          # Try StaticX with error handling
          if staticx --strip photogeoalign_linux photogeoalign_linux_static; then
            mv photogeoalign_linux_static photogeoalign_linux
            echo "StaticX wrapping completed successfully"
          else
            echo "StaticX failed, keeping PyInstaller executable"
            echo "Executable will have GLIBC dependencies"
          fi
        else
          echo "Warning: executable not found for StaticX wrapping"
        fi
    
    - name: Build executable (Windows)
      if: matrix.os == 'windows-latest'
      run: |
        echo "Building with system Python..."
        pyinstaller ${{ matrix.spec-file }} --clean --noconfirm
    
    - name: Verify executable exists
      run: |
        python -c "import os; print('Dist contents:'); [print(f'  {f}') for f in os.listdir('dist') if os.path.exists('dist')]"
    
    - name: Test executable (basic smoke test)
      run: |
        python -c "import os, sys; os.chdir('dist'); files=os.listdir('.'); exe_files=[f for f in files if f.startswith('photogeoalign') and (f.endswith('.exe') or '.' not in f.split('/')[-1])]; print(f'Found executables: {exe_files}'); sys.exit(0 if exe_files else 1)"
    
    - name: Prepare artifact
      run: |
        python -c "import os, shutil; os.makedirs('release', exist_ok=True); files=[f for f in os.listdir('dist') if f.startswith('photogeoalign')]; [shutil.copy(f'dist/{f}', 'release/') for f in files]; print(f'Copied: {files}')"
        python -c "import shutil; shutil.copy('README.md', 'release/'); shutil.copy('requirements.txt', 'release/'); print('Added README and requirements')"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: release/
        retention-days: 30
    
    - name: Create release archive
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd release
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ../photogeoalign-${{ github.ref_name }}-windows.zip *
        else
          tar -czf ../photogeoalign-${{ github.ref_name }}-linux.tar.gz *
        fi
    
    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          photogeoalign-${{ github.ref_name }}-*.zip
          photogeoalign-${{ github.ref_name }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de notification des résultats
  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Status
      run: |
        echo "Build completed!"
        echo "Windows build: ${{ needs.build.outputs.windows-status }}"
        echo "Linux build: ${{ needs.build.outputs.linux-status }}"
