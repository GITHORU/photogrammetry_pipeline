name: Build Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permet le d√©clenchement manuel

jobs:
  # ============================================================================
  # üê≥ DOCKER BUILDS - Queue rapide + Environnements pr√©cis
  # ============================================================================
  
  build-docker:
    strategy:
      fail-fast: false  # Continue autres builds m√™me si un √©choue
      matrix:
        include:
          # Rocky Linux 8 - Compatibilit√© RHEL 8.2 / GLIBC 2.28 
          - container: rockylinux:8
            python-version: '3.11.5'
            spec-file: photogeoalign_linux.spec
            artifact-name: photogeoalign-rocky8-docker
            platform: linux
            glibc-version: "2.28"
            
          # Ubuntu 22.04 - Moderne + performant  
          - container: ubuntu:22.04
            python-version: '3.11'
            spec-file: photogeoalign_linux.spec
            artifact-name: photogeoalign-ubuntu22-docker
            platform: linux
            glibc-version: "2.35"

    runs-on: ubuntu-latest  # ‚ö° Queue rapide garantie !
    container: ${{ matrix.container }}
    
    steps:
    - name: Setup container environment
      run: |
        # üîß Configuration universelle
        export TZ=Europe/Paris
        
        # üì¶ Installation conditionnelle selon l'OS
        if [[ "${{ matrix.container }}" == centos* ]] || [[ "${{ matrix.container }}" == rockylinux* ]]; then
          # CentOS/RHEL/Rocky setup avec Python 3.11.5 compil√© (match cluster exact)
          yum update -y
          # Activation EPEL pour d√©pendances de base
          yum install -y epel-release
          yum config-manager --set-enabled powertools || yum config-manager --set-enabled PowerTools
          yum install -y git gcc gcc-c++ make mesa-libGL libgomp zlib-devel file \
                         openssl-devel bzip2-devel libffi-devel sqlite-devel \
                         readline-devel tk-devel gdbm-devel \
                         xz-devel expat-devel wget findutils \
                         cmake3 libtiff-devel libcurl-devel sqlite-devel
          
          # Compilation PROJ 7.2.1 (compatible PyProj 3.x)
          cd /tmp
          wget https://download.osgeo.org/proj/proj-7.2.1.tar.gz
          tar xzf proj-7.2.1.tar.gz
          cd proj-7.2.1
          mkdir build && cd build
          cmake3 .. -DCMAKE_INSTALL_PREFIX=/usr/local
          make -j$(nproc)
          make install
          echo "/usr/local/lib" >> /etc/ld.so.conf.d/proj.conf
          ldconfig
          
          # Compilation Python 3.11.5 (version exacte cluster)
          cd /tmp
          wget https://www.python.org/ftp/python/3.11.5/Python-3.11.5.tgz
          tar xvf Python-3.11.5.tgz
          cd Python-3.11.5
          ./configure --enable-optimizations --enable-shared --prefix=/usr/local
          make -j$(nproc)
          make altinstall
          
          # Liens pour utilisation standard
          ln -sf /usr/local/bin/python3.11 /usr/bin/python3
          ln -sf /usr/local/bin/python3.11 /usr/bin/python
          ln -sf /usr/local/bin/pip3.11 /usr/bin/pip3
          
          # Configuration shared library pour PyInstaller
          echo "/usr/local/lib" >> /etc/ld.so.conf.d/python311.conf
          ldconfig
          
          # Nettoyage
          cd / && rm -rf /tmp/Python-3.11.5*
        else
          # Ubuntu/Debian setup  
          export DEBIAN_FRONTEND=noninteractive
          ln -snf /usr/share/zoneinfo/$TZ /etc/localtime && echo $TZ > /etc/timezone
          apt-get update
          apt-get install -y python3 python3-pip python3-dev git build-essential \
                             libgl1-mesa-glx libglib2.0-0 libsm6 libxext6 \
                             libxrender-dev libgomp1 file
          ln -sf /usr/bin/python3 /usr/bin/python
          
          # üîß D√âPENDANCES RASTERIO/GDAL pour Ubuntu 22.04
          apt-get install -y \
            libgdal-dev \
            gdal-bin \
            libproj-dev \
            proj-data \
            proj-bin \
            libgeotiff-dev \
            libtiff5-dev \
            libjpeg-turbo8-dev \
            libpng-dev \
            libwebp-dev \
            libhdf5-dev \
            libnetcdf-dev \
            libspatialite-dev \
            libsqlite3-dev \
            libcurl4-openssl-dev \
            libssl-dev \
            libxml2-dev \
            libexpat1-dev \
            libcairo2-dev \
            libpango1.0-dev \
            libgdk-pixbuf2.0-dev \
            libatlas-base-dev \
            libopenblas-dev \
            liblapack-dev \
            gfortran
        fi
        
        # üìä Info version
        echo "=== Container Info ==="
        cat /etc/os-release
        python3 --version
        ldd --version | head -1
    
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Fix Git ownership
      run: |
        git config --global --add safe.directory $GITHUB_WORKSPACE
    
    - name: Install Python dependencies
      run: |
        python3 -m pip install --upgrade pip
        
        # Installation selon la cible
        if [[ "${{ matrix.container }}" == rockylinux* ]]; then
          # Versions cluster-compatible pour RHEL 8.2 (√©vite OpenBLAS64 alignment errors)
          # Force wheels pr√©-compil√©s pour √©viter erreurs compilation
          echo "üîß Installation Rocky Linux avec requirements_cluster.txt"
          pip3 install --only-binary=:all: -r requirements_cluster.txt --verbose
        else
          # Versions standard pour autres OS
          echo "üîß Installation Ubuntu avec requirements.txt"
          pip3 install -r requirements.txt --verbose
        fi
        
        echo "=== LISTE DES PACKAGES INSTALL√âS ==="
        pip3 list | grep -E "(rasterio|numpy|scipy|pyproj)"
        echo "=== FIN LISTE ==="
        
        # üîß FALLBACK : Installation manuelle de rasterio si √©chec
        if ! python3 -c "import rasterio" 2>/dev/null; then
          echo "üö® RASTERIO NON INSTALL√â - Tentative d'installation manuelle"
          echo "=== INSTALLATION MANUELLE RASTERIO ==="
          
          if [[ "${{ matrix.container }}" == rockylinux* ]]; then
            # Rocky Linux : version sp√©cifique cluster
            pip3 install --only-binary=:all: rasterio==1.3.11 --verbose
          else
            # Ubuntu : version standard
            pip3 install rasterio==1.3.11 --verbose
          fi
          
          echo "=== V√âRIFICATION APR√àS FALLBACK ==="
          python3 -c "import rasterio; print(f'‚úÖ Rasterio install√©: {rasterio.__version__}')" || echo "‚ùå √âCHEC INSTALLATION RASTERIO"
        fi
    
    - name: Verify rasterio installation
      run: |
        echo "=== V√âRIFICATION RASTERIO ==="
        python3 -c "import rasterio; print(f'‚úÖ Rasterio install√©: {rasterio.__version__}')"
        python3 -c "import rasterio.sample; print('‚úÖ rasterio.sample disponible')"
        python3 -c "import rasterio.vrt; print('‚úÖ rasterio.vrt disponible')"
        python3 -c "import rasterio._features; print('‚úÖ rasterio._features disponible')"
        python3 -c "import rasterio.coords; print('‚úÖ rasterio.coords disponible')"
        echo "=== FIN V√âRIFICATION ==="
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: docker-${{ matrix.container }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          docker-${{ matrix.container }}-pip-
    
    - name: Create hooks directory
      run: |
        python3 -c "import os; os.makedirs('hooks', exist_ok=True); print('Hooks directory ready')"
    
    - name: Verify spec file exists
      run: |
        python3 -c "import os; print(f'Spec file: ${{ matrix.spec-file }}'); print('Exists:', os.path.exists('${{ matrix.spec-file }}'))"
    
    - name: Build executable
      run: |
        pyinstaller ${{ matrix.spec-file }} --clean --noconfirm
    
    - name: Verify executable exists
      run: |
        python3 -c "import os; print('Dist contents:'); [print(f'  {f}') for f in os.listdir('dist') if os.path.exists('dist')]"
    
    - name: Test executable (basic smoke test)
      run: |
        python3 -c "import os, sys; os.chdir('dist'); files=os.listdir('.'); exe_files=[f for f in files if f.startswith('photogeoalign') and '.' not in f.split('/')[-1]]; print(f'Found executables: {exe_files}'); sys.exit(0 if exe_files else 1)"
    
    - name: GLIBC compatibility check
      run: |
        echo "=== GLIBC Analysis ==="
        echo "Expected GLIBC: ${{ matrix.glibc-version }}"
        if [ -f dist/photogeoalign ]; then
          echo "Executable dependencies:"
          ldd dist/photogeoalign | grep -E "(libc|GLIBC)" || echo "No GLIBC deps found"
          echo "Executable info:"
          file dist/photogeoalign
        fi
    
    - name: Prepare artifact
      run: |
        python3 -c "import os, shutil; os.makedirs('release', exist_ok=True); files=[f for f in os.listdir('dist') if f.startswith('photogeoalign')]; [shutil.copy(f'dist/{f}', 'release/') for f in files]; print(f'Copied: {files}')"
        python3 -c "import shutil; shutil.copy('README.md', 'release/'); shutil.copy('requirements.txt', 'release/'); print('Added README and requirements')"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: release/
        retention-days: 30
    
    - name: Create release archive
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd release
        tar -czf ../photogeoalign-${{ github.ref_name }}-${{ matrix.artifact-name }}.tar.gz *
    
    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          photogeoalign-${{ github.ref_name }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # ü™ü WINDOWS BUILD - Natif (pas de container Windows disponible)
  # ============================================================================
  
  build-windows:
    runs-on: windows-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python 3.11
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~\AppData\Local\pip\Cache
        key: windows-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          windows-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create hooks directory
      run: |
        python -c "import os; os.makedirs('hooks', exist_ok=True); print('Hooks directory ready')"
    
    - name: Build executable
      run: |
        pyinstaller photogeoalign_windows.spec --clean --noconfirm
    
    - name: Verify executable exists
      run: |
        python -c "import os; print('Dist contents:'); [print(f'  {f}') for f in os.listdir('dist') if os.path.exists('dist')]"
    
    - name: Test executable (basic smoke test)
      run: |
        python -c "import os, sys; os.chdir('dist'); files=os.listdir('.'); exe_files=[f for f in files if f.endswith('.exe')]; print(f'Found executables: {exe_files}'); sys.exit(0 if exe_files else 1)"
    
    - name: Prepare artifact
      run: |
        python -c "import os, shutil; os.makedirs('release', exist_ok=True); files=[f for f in os.listdir('dist') if f.startswith('photogeoalign')]; [shutil.copy(f'dist/{f}', 'release/') for f in files]; print(f'Copied: {files}')"
        python -c "import shutil; shutil.copy('README.md', 'release/'); shutil.copy('requirements.txt', 'release/'); print('Added README and requirements')"
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: photogeoalign-windows-docker
        path: release/
        retention-days: 30
    
    - name: Create release archive
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd release
        7z a ../photogeoalign-${{ github.ref_name }}-windows.zip *
    
    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          photogeoalign-${{ github.ref_name }}-windows.zip
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # ============================================================================
  # üìä NOTIFICATION - Status de tous les builds
  # ============================================================================
  
  notify:
    needs: [build-docker, build-windows]
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Status Summary
      run: |
        echo "üèóÔ∏è Build Summary - Docker Strategy"
        echo "=================================="
        echo "üê≥ Docker builds: ${{ needs.build-docker.result }}"
        echo "ü™ü Windows build: ${{ needs.build-windows.result }}"
        echo ""
        echo "üì¶ Expected artifacts:"
        echo "  ‚Ä¢ photogeoalign-rocky8-docker (GLIBC 2.28 + Python 3.11.5 compil√© - RHEL 8.2 EXACT)"
        echo "  ‚Ä¢ photogeoalign-ubuntu22-docker (GLIBC 2.35 + Python 3.11 - Moderne)" 
        echo "  ‚Ä¢ photogeoalign-windows-docker (.exe)"
        echo ""
        echo "‚ö° Docker benefits: Queue rapide + environnements pr√©cis!"
