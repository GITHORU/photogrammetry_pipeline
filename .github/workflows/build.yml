name: Build Executables

on:
  push:
    branches: [ main ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:  # Permet le déclenchement manuel

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            python-version: '3.11'
            spec-file: photogeoalign_windows.spec
            artifact-name: photogeoalign-windows
            executable-ext: .exe
          - os: ubuntu-latest
            python-version: '3.11'
            spec-file: photogeoalign_linux.spec
            artifact-name: photogeoalign-linux
            executable-ext: ""
          # Optionnel: Build avec Python 3.10 pour compatibilité
          # - os: ubuntu-latest
          #   python-version: 3.10
          #   spec-file: photogeoalign_linux.spec
          #   artifact-name: photogeoalign-linux-py310
          #   executable-ext: ""

    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install system dependencies (Linux)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-dev libglib2.0-0 libxext6 libfontconfig1 libegl1-mesa libxrandr2 libxinerama1 libxi6
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pyinstaller
    
    - name: Create hooks directory
      run: |
        mkdir -p hooks
    
    - name: Verify spec file exists
      run: |
        ls -la ${{ matrix.spec-file }}
    
    - name: Build executable
      run: |
        pyinstaller ${{ matrix.spec-file }} --clean --noconfirm
    
    - name: Verify executable exists
      run: |
        ls -la dist/
    
    - name: Test executable (basic smoke test)
      run: |
        cd dist
        # Test basique sans interface graphique
        if [ "${{ matrix.os }}" == "ubuntu-latest" ]; then
          echo "Linux executable created: $(ls -la photogeoalign)"
          file photogeoalign || echo "Executable exists"
        else
          ./photogeoalign${{ matrix.executable-ext }} --help || echo "Windows executable created successfully"
        fi
    
    - name: Prepare artifact
      run: |
        mkdir -p release
        cp dist/photogeoalign${{ matrix.executable-ext }} release/
        cp README.md release/
        cp requirements.txt release/
    
    - name: Upload artifact
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.artifact-name }}
        path: release/
        retention-days: 30
    
    - name: Create release archive
      if: startsWith(github.ref, 'refs/tags/')
      run: |
        cd release
        if [ "${{ matrix.os }}" == "windows-latest" ]; then
          7z a ../photogeoalign-${{ github.ref_name }}-windows.zip *
        else
          tar -czf ../photogeoalign-${{ github.ref_name }}-linux.tar.gz *
        fi
    
    - name: Upload to release
      if: startsWith(github.ref, 'refs/tags/')
      uses: softprops/action-gh-release@v1
      with:
        files: |
          photogeoalign-${{ github.ref_name }}-*.zip
          photogeoalign-${{ github.ref_name }}-*.tar.gz
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Job de notification des résultats
  notify:
    needs: build
    runs-on: ubuntu-latest
    if: always()
    steps:
    - name: Build Status
      run: |
        echo "Build completed!"
        echo "Windows build: ${{ needs.build.outputs.windows-status }}"
        echo "Linux build: ${{ needs.build.outputs.linux-status }}"
